#BlueJ class context
comment0.target=Hotel
comment0.text=\n\ Class\ Hotel\ represents\ a\ hotel.\ It\ has\ (ArrayLists)\ for\ Rooms\ and\ Reservations.\n\ \n\ @author\ Dale\ Berg,\ Nick\ Coyle,\ Megan\ Laine,\ Steven\ Liu\n\ @version\ 7\ Mar\ 2019\ CSC\ 143\n
comment1.params=fileName
comment1.target=Hotel(java.lang.String)
comment1.text=\n\ Hotel\ Constructor\ 1/1\ (Constructor\ used\ from\ Main\ client\ code.)\n\ Reads\ data\ from\ the\ hotel\ text\ file,\ and\ populates\ the\ LinkedRoomList.\n
comment10.params=
comment10.target=java.lang.String\ getAddress()
comment10.text=\n\ Returns\ the\ hotel's\ address\ as\ a\ string.\n\n\ @return\ address\ (String)\ the\ hotel's\ address\n
comment11.params=
comment11.target=java.lang.String\ getPhoneNumber()
comment11.text=\n\ Returns\ the\ hotel's\ phone\ number\ as\ a\ string.\n\n\ @return\ phoneNumber\ (String)\ the\ hotel's\ phone\ number\n
comment12.params=
comment12.target=GuestTree\ getMemberTree()
comment12.text=\n\ Returns\ a\ reference\ to\ the\ hotel's\ membership\ GuestTree's\ overallRoot.\n\ \n\ @return\ overallRoot\ (GuestTreeNode)\ the\ hotel\ membership's\ overallRoot\ pointer\n
comment13.params=
comment13.target=LinkedRoomList\ getEmptyRooms()
comment13.text=\n\ Returns\ a\ LinkedRoomList\ of\ Room\ objects\ that\ are\ available.\n\ A\ room\ is\ considered\ available\ IF\ there\ is\ no\ reservation\ on\ it,\ and\ IF\ there\ are\ no\n\ guests\ checked\ into\ the\ room.\n\n\ @return\ available\ (LinkedRoomList)\ linked\ list\ of\ available\ rooms\ in\ the\ hotel.\n
comment14.params=
comment14.target=LinkedRoomList\ getReservedRoomsList()
comment14.text=\n\ Returns\ a\ linked\ list\ of\ Room\ objects\ that\ are\ unavailable.\n\ A\ reserved\ room\ is\ considered\ unavailable.\ \n\ A\ room\ with\ a\ checked\ in\ guest\ is\ considered\ unavailable.\n\n\ @return\ rms\ (LinkedRoomList)\ Linked\ list\ of\ unavailable\ rooms\ in\ the\ hotel.\n
comment15.params=
comment15.target=int\ getTotalReservedRooms()
comment15.text=\n\ Returns\ the\ number\ of\ reserved\ rooms\ in\ the\ hotel.\ \n\ A\ room\ is\ considered\ reserved\ if\ the\ reservation\ status\ is\ WAITING.\ \n\ \n\ @return\ accum\ (int)\ representing\ number\ of\ reserved\ rooms\ in\ the\ hotel.\n
comment16.params=
comment16.target=int\ getTotalOccupiedRooms()
comment16.text=\n\ Returns\ the\ number\ of\ occupied\ rooms\ in\ the\ hotel.\ \n\ A\ room\ with\ a\ reservation\ with\ status\ IN\ is\ considered\ occupied.\ \n\ \n\ @return\ accum\ (int)\ representing\ number\ of\ occupied\ rooms\ in\ the\ hotel.\n
comment17.params=
comment17.target=LinkedRoomList\ getAllRooms()
comment17.text=\n\ Returns\ the\ LinkedRoomList\ that\ 'contains'\ all\ Room\ objects\ in\ this\ hotel.\n\n\ @return\ rooms\ (LinkedRoomList)\ representing\ all\ Room\ objects\ in\ the\ hotel.\n
comment18.params=
comment18.target=int\ getAllRoomsCount()
comment18.text=\n\ Returns\ the\ number\ of\ all\ Room\ objects\ in\ this\ hotel.\n\n\ @return\ (int)\ representing\ the\ number\ of\ /\ count\ of\ all\ Room\ objects\ in\ the\ hotel.\n
comment19.params=roomNumber
comment19.target=Room\ getRoom(java.lang.String)
comment19.text=\n\ Returns\ a\ room\ object\ when\ the\ room\ number\ matches\ the\ argument.\n\ \n\ @param\ roomNumber\ (String)\ the\ room\ number\ being\ searched\n\ @return\ rm\ or\ null\ (Room)\ the\ room\ object\ that\ matches\ the\ search.\ or\ null,\ if\ no\ match.\n
comment2.params=
comment2.target=void\ fillLinkedRoomList()
comment2.text=\n\ Reads\ data\ from\ a\ .txt\ file\ and\ stores\ it\ in\ this\ LinkedRoomList.\n\ Assumes\ that\ the\ text\ file\ is\ in\ a\ correct\ template.\ (Assume\ no\ mistakes\ in\ .txt\ file)\n\n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\n
comment20.params=guestLastName
comment20.target=java.util.ArrayList\ getReservationsByLastName(java.lang.String)
comment20.text=\n\ Returns\ an\ arraylist\ of\ all\ reservations\ matching\ a\ guest's\ last\ name\ from\ \n\ hotel's\ list\ of\ reservations.\n\ \n\ @param\ guestLastName\ (String)\ the\ last\ name\ to\ search\ by\n\ @return\ reservationsByName\ (ArrayList<Reservation>)\ list\ of\ reservations\ whose\ last\ name\ matches\ the\ search\ criteria.\n
comment21.params=reservationID
comment21.target=Reservation\ getReservation(int)
comment21.text=\n\ Returns\ a\ Reservation\ object\ when\ the\ reservationIDs\ match.\ Returns\ null\ if\ no\ match.\n\ \n\ @param\ reservationID\ (int)\ the\ reservation\ ID\ to\ search\ for.\n\ @return\ res\ or\ null\ (Reservation)\ the\ reservation\ object\ whose\ ID\ matches\ the\ search.\n
comment22.params=
comment22.target=int\ getNumReservations()
comment22.text=\n\ Returns\ the\ number\ of\ all\ reservations\ that\ the\ Hotel\ has\ (includes\ all\ statuses).\n\n\ @return\ (int)\ the\ number\ of\ all\ hotel\ reservations\ (all\ statuses)\n
comment23.params=
comment23.target=java.util.ArrayList\ getActiveReservations()
comment23.text=\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \n\ 'active'.\ 'Active'\ reservation\ \=\ hotel\ is\ waiting\ for\ guest,\ OR\ guest\ is\ checked\ in.\n\ \n\ @return\ ArrayList<Reservation>\ of\ all\ active\ reservations.\n
comment24.params=
comment24.target=java.util.ArrayList\ getInactiveReservations()
comment24.text=\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \n\ 'inactive'.\ 'Inactive'\ reservation\ \=\ guest\ checked\ out,\ OR\ reservation\ canceled.\n\ \n\ @return\ ArrayList<Reservation>\ of\ all\ inactive\ reservations.\n
comment25.params=
comment25.target=java.util.ArrayList\ getAllInvoicesPaid()
comment25.text=\n\ Returns\ an\ ArrayList\ of\ strings\ representing\ 'invoices'\ in\ the\ hotel\ \n\ where\ there\ is\ NO\ balance\ due.\n\ \n\ @return\ ArrayList<String>\ of\ all\ 'invoices'\ that\ have\ been\ paid.\n
comment26.params=
comment26.target=java.util.ArrayList\ getAllInvoicesUnpaid()
comment26.text=\n\ Returns\ an\ ArrayList\ of\ strings\ representing\ 'invoices'\ in\ the\ hotel\ \n\ where\ there\ is\ a\ balance\ due.\n\ \n\ @return\ ArrayList<String>\ of\ all\ 'invoices'\ with\ outstanding\ balance.\n
comment27.params=guest
comment27.target=Reservation\ findReservation(Guest)
comment27.text=\n\ (overloaded\ method)\ Returns\ a\ reservation\ object\ if\ the\ Guest\ object\ passed\ in\ \n\ matches\ the\ Guest\ object\ on\ the\ reservation,\ or\ NULL\ if\ no\ such\ match\ exists.\n\n\ @param\ guest\ (Guest)\ a\ hotel\ guest\n\ @return\ result\ (Reservation)\ matching\ a\ Guest\ object;\ or\ NULL\ if\ no\ such\ match\ exists.\n
comment28.params=roomNum
comment28.target=Reservation\ findReservation(java.lang.String)
comment28.text=\n\ (overloaded\ method)\ Returns\ a\ reservation\ object\ if\ the\ room\ number\ matches\ a\ \n\ reservation\ that\ has\ IN\ OR\ WAITING\ status.\n\n\ @param\ roomNum\ (String)\ the\ room\ number\n\ @return\ result\ (Reservation)\ the\ reservation\ matching\n
comment29.params=status
comment29.target=java.util.ArrayList\ getReservations(Status)
comment29.text=\n\ Returns\ an\ array\ list\ of\ reservations\ with\ a\ given\ status.\n\n\ @param\ status\ (Status)\ gets\ reservations\ with\ a\ certain\ parameterized\ status.\n\ @return\ res\ (ArrayList<Reservation>)\ an\ ArrayList\ of\ reservations\ matching\ a\ certain\ status.\n
comment3.params=room
comment3.target=void\ addRoom(Room)
comment3.text=\n\ Adds\ room\ object\ to\ our\ LinkedRoomList\n\n\ @param\ room(Room)\ represents\ a\ room\ object.\n
comment30.params=
comment30.target=double\ getTotalSales()
comment30.text=\n\ Returns\ the\ total\ of\ all\ paid\ reservations.\ A\ reservation\ is\ considered\ to\ be\ 'paid'\n\ IN\ FULL\ at\ the\ time\ of\ Guest\ checkout\ from\ Hotel.\n\ \n\ @return\ totalSales\ (double)\ the\ total\ amount\ paid\ to\ the\ hotel\ thru\ reservations.\n
comment31.params=
comment31.target=double\ getTotalPaymentDue()
comment31.text=\n\ Returns\ the\ total\ of\ all\ unpaid\ reservations.\n\ \n\ @return\ totalAmountDue\ (double)\ the\ total\ amount\ still\ due\ to\ the\ hotel\ for\ reservations.\n
comment32.params=
comment32.target=int\ getTotalGuestsInHotel()
comment32.text=\n\ Returns\ a\ count\ of\ all\ the\ guests\ currently\ checked\ into\ the\ hotel\ accounting\ for\ party\ size\n\ \n\ @return\ countGuests\ (int)\ representing\ how\ many\ human\ guests\ are\ supposedly\ checked\ into\ hotel.\n
comment33.params=
comment33.target=int\ getTotalCheckedOutReservations()
comment33.text=\n\ Returns\ how\ many\ reservations\ with\ Status\ OUT\n\ \n\ @return\ totalCheckouts\ (int)\ representing\ number\ of\ reservations\ with\ status\ 'checked\ out'\n
comment34.params=
comment34.target=int\ getTotalCanceledReservations()
comment34.text=\n\ Returns\ how\ many\ reservations\ with\ Status\ CANCELED\n\ \n\ @return\ totalCancellations\ (int)\ representing\ number\ of\ reservations\ with\ status\ 'canceled'\n
comment35.params=name
comment35.target=void\ setName(java.lang.String)
comment35.text=\n\ Method\ setName\ sets\ this\ hotel's\ name\ field.\n\n\ @param\ name\ (String)\ hotel\ name\n
comment36.params=address
comment36.target=void\ setAddress(java.lang.String)
comment36.text=\n\ Method\ setAddress\ sets\ this\ hotel's\ address\ field.\n\n\ @param\ address\ (String)\ hotel\ address\n
comment37.params=phoneNumber
comment37.target=void\ setPhoneNumber(java.lang.String)
comment37.text=\n\ Method\ setPhoneNumber\ sets\ the\ hotel's\ phone\ number\n\n\ @param\ phoneNumber\ (String)\ hotel\ phone\ number\n
comment38.params=r
comment38.target=void\ addReservation(Reservation)
comment38.text=\n\ Adds\ a\ new\ Reservation\ object\ to\ the\ Hotel's\ arrayList\ of\ reservation\ objects\n\ \n\ @param\ r\ (Reservation)\ reservation\ object\n
comment39.params=
comment39.target=void\ sortReservations()
comment39.text=\n\ This\ method\ sorts\ reservations\ with\ a\ cancelled\ status\ so\ that\ they\ appear\ first\ \n\ in\ our\ .txt\ file\n
comment4.params=other
comment4.target=void\ addMember(Guest)
comment4.text=\n\ Adds\ Guests\ to\ our\ membership\ tree\ if\ they\ are\ chose\ membership;\n\ If\ the\ guest\ already\ existed\ in\ the\ membership\ tree\ and\ the\ room\ preference\ is\ different,\n\ update\ the\ treeNode\ w/\ the\ new\ room\ Preference.\n\ precondition\:\ only\ guests\ who\ have\ signed\ up\ for\ membership\ would\ make\ it\ to\ this\ method.\n\n\ @param\ g\ (Guest)\ represents\ a\ Guest\ object\n
comment40.params=
comment40.target=java.lang.String\ toString()
comment40.text=\n\ Method\ toString\ overrides\ Object\ class's\ toString\ method;\ \n\ returns\ info\ about\ the\ hotel.\n\n\ @return\ (String)\ with\ info\ about\ name,\ address,\ and\ phone\ number.\n
comment5.params=fileName
comment5.target=void\ fillReservationArrayList(java.lang.String)
comment5.text=\n\ Reads\ data\ from\ a\ .txt\ file\ and\ stores\ it\ in\ this\ Room-object\ ArrayList.\n\ Assumes\ that\ the\ text\ file\ is\ in\ a\ correct\ template.\ (Assume\ no\ mistakes\ in\ .txt\ file)\n\n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\n
comment6.params=fileName
comment6.target=void\ fillMemberGuestTree(java.lang.String)
comment6.text=\n\ Fills\ the\ membership\ GuestTree\ with\ guest\ information\ from\ a\ pre-existing\ .txt\ file.\n\ Assumes\ that\ the\ text\ file\ is\ in\ the\ correct\ template.\n\ \n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\n
comment7.params=
comment7.target=void\ saveReservations()
comment7.text=\n\ Saves\ reservation\ data\ back\ to\ the\ text\ files\ we\ read\ from.\n\ \n\ ArrayList\ of\ reservations\ needs\ to\ be\ sorted\ with\ canceled\ ones\ first\ before\ we\ save.\n\ This\ is\ because\ when\ the\ program\ starts\ and\ reservations\ are\ read\ in\ from\ the\ txt\ \n\ file,\ if\ a\ room\ is\ reserved\ with\ status\ other\ than\ canceled,\ then\ the\ room\ will\ be\ \n\ flagged\ unavailable,\ but\ if\ the\ same\ room\ has\ a\ canceled\ reservation\ later\ in\ the\ \n\ text\ file,\ it\ will\ think\ the\ room\ is\ unavailable\ (which\ is\ true)\ and\ will\ crash\ \n\ trying\ to\ create\ the\ reservation\ on\ a\ room\ that\ is\ not\ available.\n
comment8.params=
comment8.target=void\ saveMembers()
comment8.text=\n\ Saves\ membership\ data\ back\ to\ the\ text\ files\ we\ read\ from.\n
comment9.params=
comment9.target=java.lang.String\ getName()
comment9.text=\n\ Returns\ the\ hotel's\ name\n\n\ @return\ name\ (String)\ the\ hotel's\ name\n
numComments=41
