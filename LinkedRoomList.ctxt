#BlueJ class context
comment0.target=LinkedRoomList
comment0.text=\n\ Class\ LinkedRoomList\ can\ be\ used\ to\ store\ a\ values\ of\ type\ Room.\ It\ has\ a\ reference\ to\ \n\ the\ first\ Room\ in\ the\ list,\ the\ last\ Room\ in\ the\ list,\ and\ knows\ how\ many\ Rooms\ are\ in\ \n\ the\ list.\n\ \n\ @author\ Megan\ Laine\n\ @version\ 4\ Mar\ 2019\ CSC\ 143\ \n
comment1.params=
comment1.target=LinkedRoomList()
comment1.text=\n\ LinkedRoomList\ Constructor\ (default\ 1/2)\ constructs\ a\ LinkedRoomList\ that\ is\ 'empty'\ \n\ (it\ has\ no\ ListRoomNodes\ in\ it).\n
comment10.params=index\ r
comment10.target=void\ add(int,\ Room)
comment10.text=\n\ Adds\ (Inserts,\ really)\ the\ given\ Room\ to\ the\ LinkedRoomList\ at\ the\ given\ index,\ if\ \n\ index\ is\ valid;\ shuffles\ all\ Rooms\ to\ the\ right\ of\ insertion\ rightward.\n\n\ @param\ index\ (int)\ the\ index\ where\ the\ added\ Room\ should\ go\n\ @param\ r\ (Room)\ the\ Room\ object\ to\ add\ to\ the\ list\n
comment11.params=other
comment11.target=void\ addAll(java.util.List)
comment11.text=\n\ Adds\ all\ the\ Room\ objects\ from\ any\ 'list\ of\ Rooms'\ to\ the\ end\ of\ THIS\ LinkedRoomList.\n\n\ @param\ other\ (List<Room>)\ a\ list\ of\ Room\ objects\n
comment12.params=index
comment12.target=void\ remove(int)
comment12.text=\n\ Removes\ the\ ListRoomNode\ at\ the\ given\ index;\ moves\ all\ Nodes\ that\ were\ behind\ it\ to\n\ the\ left.\n\n\ @param\ index\ (int)\ the\ index\ in\ the\ list\ where\ the\ ListRoomNode\ should\ be\ 'removed'\n
comment13.params=index\ r
comment13.target=void\ set(int,\ Room)
comment13.text=\n\ Set/replace\ the\ Room\ at\ the\ given\ list\ index's\ ListRoomNode\ with\ given\ Room.\n\n\ @param\ index\ (int)\ the\ index\ in\ the\ list\ where\ the\ ListRoomNode\ should\ be\ 'replaced'\n\ @param\ r\ (Room)\ the\ room\ object\ that\ will\ replace\ the\ existing\ Room\n
comment14.params=
comment14.target=void\ clear()
comment14.text=\n\ Clears\ this\ LinkedRoomList;\ sets\ size\ to\ zero;\ List\ is\ considered\ 'empty'\ afterwards.\n
comment15.params=
comment15.target=java.util.Iterator\ iterator()
comment15.text=\n\ Returns\ an\ iterator\ for\ this\ instance\ of\ LinkedRoomList.\n\n\ @return\ (Iterator)\ for\ ListRoomNodes\n
comment16.params=index
comment16.target=ListRoomNode\ nodeAt(int)
comment16.text=\n\ Returns\ the\ ListRoomNode\ at\ the\ specified\ index,\ if\ index\ is\ valid.\ Because\ the\ list\ \n\ is\ doubly-linked,\ it\ is\ possible\ to\ shorten\ search\ time\ by\ starting\ from\ the\ front\ \n\ or\ starting\ from\ the\ back\ of\ this\ LinkedRoomList.\n\n\ @param\ index\ (int)\ the\ index\ of\ interest\n\ @return\ (ListRoomNode)\ Node\ to\ return\n
comment17.params=index
comment17.target=void\ checkIndex(int)
comment17.text=\n\ Checks\ if\ the\ index\ of\ interest\ is\ valid\ (0\ <\=\ index\ <\ list's\ size).\n\n\ @param\ index\ (int)\ an\ index\ of\ interest\n\ @throws\ IndexOutOfBoundsException\ if\ the\ index\ is\ not\ valid\n
comment2.params=r
comment2.target=LinkedRoomList(Room)
comment2.text=\n\ LinkedRoomList\ Constructor\ (2/2)\ constructs\ a\ LinkedRoomList\ with\ a\ given\ Room\ as\ the\ \n\ front\ node;\ there\ is\ no\ back\ node.\ This\ is\ similar\ to\ using\ the\ add\ method.\ \n\n\ @param\ \ r\ \ (Room)\ a\ room\ object\ to\ add\ to\ the\ list\n
comment3.params=
comment3.target=int\ size()
comment3.text=\n\ Returns\ an\ integer\ representing\ the\ size\ of\ the\ LinkedRoomList\ (how\ many\ Rooms\ are\ \n\ stored\ in\ the\ list).\n\n\ @return\ (int)\ the\ size\ of\ the\ list\ /\ how\ many\ Rooms\ are\ in\ the\ list.\n
comment4.params=index
comment4.target=Room\ get(int)
comment4.text=\n\ Returns\ the\ Room\ at\ the\ given\ index\ in\ the\ LinkedRoomList;\ the\ index\ must\ be\ a\ legal\ \n\ index\ given\ the\ size\ of\ the\ LinkedRoomList\n\ (otherwise\:\ throw\ IndexOutOfBoundsException).\n\n\ @param\ index\ (int)\ the\ index\ of\ the\ list\n\ @return\ (Room)\ the\ room\ object\ within\ the\ node\ at\ the\ given\ index.\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\n\ Method\ toString\ pverrides\ any\ inherited\ toString\ method\ and\ returns\ a\ String\ that\ \n\ contains\ a\ String\ version\ of\ the\ Rooms\ in\ the\ ListRoomNodes,\ separated\ by\ commas\ and\ \n\ within\ brackets.\n\n\ @return\ (String)\ a\ string\ display\ of\ Rooms\ in\ this\ LinkedRoomList\n
comment6.params=roomNumLookUp
comment6.target=int\ indexOf(java.lang.String)
comment6.text=\n\ Method\ indexOf\ returns\ the\ index\ of\ the\ FIRST\ Room\ instance\ in\ this\ LinkedRoomList;\ \n\ if\ there\ is\ no\ Room\ matching\ the\ search\ parameter\ (room\ number),\ then\ return\ -1.\n\n\ @param\ roomNumLookUp\ (String)\ the\ room\ number\ of\ interest\n\ @return\ (int)\ the\ index\ of\ the\ first\ Room\ instance\ in\ this\ LinkedRoomList\ that\ matches\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\n\ Returns\ true\ if\ this\ LinkedRoomList's\ size\ is\ 0\ (no\ Rooms\ \=\ empty);\ false\ otherwise.\n\n\ @return\ (boolean)\ true\ if\ this\ LinkedRoomList's\ size\ is\ 0\ and\ is\ empty.\n
comment8.params=roomNumLookUp
comment8.target=boolean\ contains(java.lang.String)
comment8.text=\n\ Returns\ true\ if\ this\ LinkedRoomList\ contains\ a\ Node\ that\ stores\ a\ Room\ whose\ roomNum\n\ matches\ the\ roomNum\ of\ interest;\ false\ otherwise.\n\n\ @param\ roomNumLookUp\ (String)\ the\ room\ number\ of\ interest\n\ @return\ (boolean)\ true\ if\ there\ is\ a\ Node\ in\ this\ List\ whose\ roomNum\ matches\n
comment9.params=r
comment9.target=void\ add(Room)
comment9.text=\n\ Adds\ the\ given\ Room\ to\ the\ END\ of\ this\ LinkedRoomList.\n\n\ @param\ r\ (Room)\ a\ room\ object\ to\ add\n
numComments=18
